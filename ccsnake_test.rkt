#lang racket

(require rackunit)
(require 2htdp/image)
(require lang/posn)
(require "ccsnake.rkt")

(check-equal? (render (game (list 3 2 1 0) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (+ GRID_X CELL_WIDTH) GRID_Y)
                                        (make-posn (+ GRID_X (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ GRID_X (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 6 5 4 3) 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 34 33 32 31) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 38 37 36 35) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ GRID_X CELL_WIDTH) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 2)) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 3)) (+ GRID_Y CELL_WIDTH)))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 41 40 39 38) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) (+ GRID_Y CELL_WIDTH)))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 69 68 67 66) 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) (+ GRID_Y CELL_WIDTH)))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 34 33 32 31) 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 1158 1157 1156 1155) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ GRID_X CELL_WIDTH) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 2)) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 3)) (+ GRID_Y (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 1161 1160 1159 1158) 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) (+ GRID_Y (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 1189 1188 1187 1186) 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) (+ GRID_Y (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 105 70 35 0) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X (+ GRID_Y (* 1 CELL_WIDTH)))
                                        (make-posn GRID_X (+ GRID_Y (* 2 CELL_WIDTH)))
                                        (make-posn GRID_X (+ GRID_Y (* 3 CELL_WIDTH))))
                                  "left" "top" BACKGROUND))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(check-equal? (render (game (list 0 1 2 3) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (+ GRID_X CELL_WIDTH) GRID_Y)
                                        (make-posn (+ GRID_X (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ GRID_X (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 3 4 5 6) 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 31 32 33 34) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 35 36 37 38) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ GRID_X CELL_WIDTH) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 2)) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 3)) (+ GRID_Y CELL_WIDTH)))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 38 39 40 41) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) (+ GRID_Y CELL_WIDTH)))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 66 67 68 69) 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) (+ GRID_Y CELL_WIDTH)))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 31 32 33 34) 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 1155 1156 1157 1158) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ GRID_X CELL_WIDTH) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 2)) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 3)) (+ GRID_Y (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 1158 1159 1160 1161) 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) (+ GRID_Y (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 1186 1187 1188 1189) 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) (+ GRID_Y (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 0 35 70 105) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X (+ GRID_Y (* 1 CELL_WIDTH)))
                                        (make-posn GRID_X (+ GRID_Y (* 2 CELL_WIDTH)))
                                        (make-posn GRID_X (+ GRID_Y (* 3 CELL_WIDTH))))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 143 144 145 146 181 216 251 286) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 4) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 5) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 5 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 6 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 7 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 8 CELL_WIDTH))))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 286 251 216 181 146 145 144 143) 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 4) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 5) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 5 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 6 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 7 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 8 CELL_WIDTH))))
                                  "left" "top" BACKGROUND))

(check-equal? (draw-snake-body (list 3 2 1 0) BACKGROUND) 
              (place-images/align (list
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "seagreen"))
                                  (list
                                   (make-posn GRID_X 0)
                                   (make-posn (+ GRID_X CELL_WIDTH) 0)
                                   (make-posn (+ GRID_X (* CELL_WIDTH 2)) 0)
                                   (make-posn (+ GRID_X (* CELL_WIDTH 3)) 0))
                                  "left" "top" BACKGROUND))
(check-equal? (draw-snake-body (list 6 5 4 3) BACKGROUND)
              (place-images/align (list
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "seagreen"))
                                  (list
                                   (make-posn (* CELL_WIDTH 3) 0)
                                   (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) 0)
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) 0)
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) 0))
                                  "left" "top" BACKGROUND))
(check-equal? (draw-snake-body (list 1161 1160 1159 1158) BACKGROUND) 
              (place-images/align (list
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "seagreen"))
                                  (list
                                   (make-posn (* CELL_WIDTH 3) (+ 0 (* CELL_WIDTH 33)))
                                   (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) (+ 0 (* CELL_WIDTH 33)))
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) (+ 0 (* CELL_WIDTH 33)))
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) (+ 0 (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(check-equal? (draw-snake-body (list 0 1 2 3) BACKGROUND) 
              (place-images/align (list
                                   (square CELL_WIDTH "solid" "seagreen")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green"))
                                  (list
                                   (make-posn GRID_X 0)
                                   (make-posn (+ GRID_X CELL_WIDTH) 0)
                                   (make-posn (+ GRID_X (* CELL_WIDTH 2)) 0)
                                   (make-posn (+ GRID_X (* CELL_WIDTH 3)) 0))
                                  "left" "top" BACKGROUND))
(check-equal? (draw-snake-body (list 3 4 5 6) BACKGROUND)
              (place-images/align (list
                                   (square CELL_WIDTH "solid" "seagreen")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green"))
                                  (list
                                   (make-posn (* CELL_WIDTH 3) 0)
                                   (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) 0)
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) 0)
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) 0))
                                  "left" "top" BACKGROUND))
(check-equal? (draw-snake-body (list 1158 1159 1160 1161) BACKGROUND) 
              (place-images/align (list
                                   (square CELL_WIDTH "solid" "seagreen")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green"))
                                  (list
                                   (make-posn (* CELL_WIDTH 3) (+ 0 (* CELL_WIDTH 33)))
                                   (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) (+ 0 (* CELL_WIDTH 33)))
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) (+ 0 (* CELL_WIDTH 33)))
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) (+ 0 (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))


(check-equal? (next (game (list 3 2 1 0) 0)) (game (list 4 3 2 1)  0))
(check-equal? (next (game (list 31 32 33 34) 0)) (game (list 30 31 32 33) 0))
(check-equal? (next (game (list 105 140 175 210) 0)) (game (list 70 105 140 175) 0))
(check-equal? (next (game (list 210 175 140 105) 0)) (game (list 245 210 175 140) 0))
(check-equal? (next (game (list 111 110 145 180) 0)) (game (list 112 111 110 145) 0))
(check-equal? (next (game (list 112 111 110 145 180) 0)) (game (list 113 112 111 110 145) 0))
(check-equal? (next (game (list 112 111 110 145 180 215) 0)) (game (list 113 112 111 110 145 180) 0))
(check-equal? (next (game (list 112 111 110 145) 0)) (game (list 113 112 111 110) 0))
(check-equal? (next (game (list 112 111 110 145 180 215 214 213 212) 0))
              (game (list 113 112 111 110 145 180 215 214 213) 0))
(check-equal? (next (game (list 42 41 40 75 110 145 180 215 216 217 218 219 220 255 290 291 292 293 258 223 188 153 152 151 150 149 
                                114 79 80 81 82 83 84) 0))
              (game (list 43 42 41 40 75 110 145 180 215 216 217 218 219 220 255 290 291 292 293 258 223 188 153 152 151 150 149
                          114 79 80 81 82 83) 0))
(check-equal? (next (game (list 38 39 40 75 110 145 180 215 216 217 218 219 220 255 290 291 292 293 258 223 188 153 152 151 150 149 
                                114 79 80 81 82 83 84) 0))
              (game (list 37 38 39 40 75 110 145 180 215 216 217 218 219 220 255 290 291 292 293 258 223 188 153 152 151 150 149 
                          114 79 80 81 82 83) 0))
(check-equal? (next (game (list 40 75 110 145 180 215 216 217 218 219 220 255 290 291 292 293 258 223 188 153 152 151 150 149 
                                114 79 80 81 82 83 84 85 120 155) 0))
              (game (list 5 40 75 110 145 180 215 216 217 218 219 220 255 290 291 292 293 258 223 188 153 152 151 150 149 
                          114 79 80 81 82 83 84 85 120) 0))
(check-equal? (next (game (list 155 120 85 84 83 82 81 80 79 114 149 150 151 152 153 188 223 258 293 292 291 290 255 220 219 218 
                                217 216 215 180 145 110 75 40) 0))
              (game (list 190 155 120 85 84 83 82 81 80 79 114 149 150 151 152 153 188 223 258 293 292 291 290 255 220 219 218
                          217 216 215 180 145 110 75) 0))
(check-equal? (next (game (list 254 253 252 217 182 147 112 111 110) 0))
              (game (list 255 254 253 252 217 182 147 112 111) 0))
(check-equal? (next (game (list 109 110 111 112)  0)) (game (list 108 109 110 111)  0))


(check-equal? (handle-arrows (game (list 3 2 1 0) 0) "left") (game (list 3 2 1 0) 0))
(check-equal? (handle-arrows (game (list 31 32 33 34) 0) "right") (game (list 31 32 33 34) 0))
(check-equal? (handle-arrows (game (list 210 175 140 105) 0) "up") (game (list 210 175 140 105) 0))
(check-equal? (handle-arrows (game (list 105 140 175 210) 0) "down") (game (list 105 140 175 210) 0))
(check-equal? (handle-arrows (game (list 3 2 1 0) 0) "right") (game (list 3 2 1 0) 0))
(check-equal? (handle-arrows (game (list 31 32 33 34) 0) "left") (game (list 31 32 33 34) 0))
(check-equal? (handle-arrows (game (list 210 175 140 105) 0) "down") (game (list 210 175 140 105) 0))
(check-equal? (handle-arrows (game (list 105 140 175 210) 0) "up") (game (list 105 140 175 210) 0))
(check-equal? (handle-arrows (game (list 38 37 36 35) 0) "up") (game (list 3 38 37 36) 0))
(check-equal? (handle-arrows (game (list 38 37 36 35) 0) "down") (game (list 73 38 37 36) 0))
(check-equal? (handle-arrows (game (list 35 36 37 38) 0) "up") (game (list 0 35 36 37) 0))
(check-equal? (handle-arrows (game (list 35 36 37 38) 0) "down") (game (list 70 35 36 37) 0))
(check-equal? (handle-arrows (game (list 211 176 141 106) 0) "right") (game (list 212 211 176 141) 0))
(check-equal? (handle-arrows (game (list 211 176 141 106) 0) "left") (game (list 210 211 176 141) 0))
(check-equal? (handle-arrows (game (list 106 141 176 211) 0) "right") (game (list 107 106 141 176) 0))
(check-equal? (handle-arrows (game (list 106 141 176 211) 0) "left") (game (list 105 106 141 176) 0))
(define ls (list 105 106 107 73 38 3 108))
(define c 0)
(check-equal? (get-starting-head (lambda (k) (begin (set! c (add1 c)) (list-ref ls (sub1 c))))) 108)
(set! ls (list 105 106 107 73 38 3 109 108))
(set! c 0)
(check-equal? (get-starting-head (lambda (k) (begin (set! c (add1 c)) (list-ref ls (sub1 c))))) 109)
(set! ls (list 105 106 107 73 38 3 143 108))
(set! c 0)
(check-equal? (get-starting-head (lambda (k) (begin (set! c (add1 c)) (list-ref ls (sub1 c))))) 143)
(set! ls (list 139 138 137 101 66 31 136))
(set! c 0)
(check-equal? (get-starting-head (lambda (k) (begin (set! c (add1 c)) (list-ref ls (sub1 c))))) 136)
(set! ls (list 139 138 137 101 66 31 171 136))
(set! c 0)
(check-equal? (get-starting-head (lambda (k) (begin (set! c (add1 c)) (list-ref ls (sub1 c))))) 171)
(set! ls (list 139 138 137 101 66 31 135 136))
(set! c 0)
(check-equal? (get-starting-head (lambda (k) (begin (set! c (add1 c)) (list-ref ls (sub1 c))))) 135)
(set! ls (list 1119 1118 1117 1151 1186 1221 1116))
(set! c 0)
(check-equal? (get-starting-head (lambda (k) (begin (set! c (add1 c)) (list-ref ls (sub1 c))))) 1116)
(set! ls (list 1119 1118 1117 1151 1186 1221 1081 1116))
(set! c 0)
(check-equal? (get-starting-head (lambda (k) (begin (set! c (add1 c)) (list-ref ls (sub1 c))))) 1081)
(set! ls (list 1119 1118 1117 1151 1186 1221 1115 1116))
(set! c 0)
(check-equal? (get-starting-head (lambda (k) (begin (set! c (add1 c)) (list-ref ls (sub1 c))))) 1115)
(set! ls (list 1085 1086 1087 1123 1158 1193 1088))
(set! c 0)
(check-equal? (get-starting-head (lambda (k) (begin (set! c (add1 c)) (list-ref ls (sub1 c))))) 1088)
(set! ls (list 1085 1086 1087 1123 1158 1193 1053 1088))
(set! c 0)
(check-equal? (get-starting-head (lambda (k) (begin (set! c (add1 c)) (list-ref ls (sub1 c))))) 1053)
(set! ls (list 1085 1086 1087 1123 1158 1193 1089 1088))
(set! c 0)
(check-equal? (get-starting-head (lambda (k) (begin (set! c (add1 c)) (list-ref ls (sub1 c))))) 1089)
(check-equal? (get-starting-game (lambda (k) 700) (lambda (k) RIGHT)) (game '(700 699 698 697) 0))
(check-equal? (get-starting-game (lambda (k) 700) (lambda (k) LEFT)) (game '(700 701 702 703) 0))
(check-equal? (get-starting-game (lambda (k) 700) (lambda (k) UP)) (game '(700 735 770 805) 0))
(check-equal? (get-starting-game (lambda (k) 700) (lambda (k) DOWN)) (game '(700 665 630 595) 0))
(check-equal? (game-over? (game '(-35 0 1 2) 0)) true)
(check-equal? (game-over? (game '(-32 3 2 1) 0)) true)
(check-equal? (game-over? (game '(1225 1190 1191 1192) 0)) true)
(check-equal? (game-over? (game '(1259 1224 1223 1222) 0)) true)
(check-equal? (game-over? (game '(1189 1190 1155 1120) 0)) true)
(check-equal? (game-over? (game '(-1 0 35 70) 0)) true)
(check-equal? (game-over? (game '(35 34 69 104) 0)) true)
(check-equal? (game-over? (game '(1225 1224 1189 1154) 0)) true)
(check-equal? (game-over? (game '(1259 1224 1189 1154) 0)) true)
(check-equal? (game-over? (game '(1242 1207 1172 1137) 0)) true)
(check-equal? (game-over? (game '(1225 1190 1155 1120) 0)) true)
(check-equal? (game-over? (game '(-1 34 69 104) 0)) true)
(check-equal? (game-over? (game '(-18 17 52 87) 0)) true)
(check-equal? (game-over? (game '(-35 0 35 70) 0)) true)
(check-equal? (game-over? (game '(1225 1224 1223 1222) 0)) true)
(check-equal? (game-over? (game '(700 699 698 697) 0)) true)
(check-equal? (game-over? (game '(35 34 33 32) 0)) true)
(check-equal? (game-over? (game '(1189 1190 1191 1192) 0)) true)
(check-equal? (game-over? (game '(699 700 701 702) 0)) true)
(check-equal? (game-over? (game '(-1 0 1 2) 0)) true)
(check-equal? (game-over? (game (list 210 175 140 105) 0)) false)
(check-equal? (game-over? (game (list 113 112 111 110 145) 0)) false)

(check-equal? (render-result (game '(700 699 698 697) 0))
              (place-image/align (above (text (string-append SCORE_STRING (number->string 0))
                                              RESULT_SCORE_SIZE SCORE_COLOR)
                                        (text START_NEW_GAME
                                              SCORE_SIZE SCORE_COLOR))
                                 (/ (- (image-width BACKGROUND)
                                       (image-width 
                                        (above (text (string-append SCORE_STRING (number->string 0))
                                                     RESULT_SCORE_SIZE SCORE_COLOR)
                                               (text START_NEW_GAME
                                                     SCORE_SIZE SCORE_COLOR)))) 2)
                                 (/ (- (image-height BACKGROUND) 
                                       (image-height 
                                        (above (text (string-append SCORE_STRING (number->string 0))
                                                     RESULT_SCORE_SIZE SCORE_COLOR)
                                               (text START_NEW_GAME
                                                     SCORE_SIZE SCORE_COLOR)))) 2)                                        
                                 "left" "top" BACKGROUND))
(check-equal? (render-result (game '(700 699 698 697) 100))
              (place-image/align (above (text (string-append SCORE_STRING (number->string 100))
                                              RESULT_SCORE_SIZE SCORE_COLOR)
                                        (text START_NEW_GAME
                                              SCORE_SIZE SCORE_COLOR))
                                 (/ (- (image-width BACKGROUND)
                                       (image-width 
                                        (above (text (string-append SCORE_STRING (number->string 100))
                                                     RESULT_SCORE_SIZE SCORE_COLOR)
                                               (text START_NEW_GAME
                                                     SCORE_SIZE SCORE_COLOR)))) 2) 
                                 (/ (- (image-height BACKGROUND) 
                                       (image-height 
                                        (above (text (string-append SCORE_STRING (number->string 100))
                                                     RESULT_SCORE_SIZE SCORE_COLOR)
                                               (text START_NEW_GAME
                                                     SCORE_SIZE SCORE_COLOR)))) 2)
                                 "left" "top" BACKGROUND))