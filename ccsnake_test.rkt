#lang racket

(require rackunit)
(require 2htdp/image)
(require lang/posn)
(require "ccsnake.rkt")

(check-equal? (render (game empty 0 0 0)) (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                                                          SCORE_SIZE SCORE_COLOR)
                                                                    (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR))
                                                              (list (make-posn SCORE_X SCORE_Y)
                                                                    (make-posn GRID_X GRID_Y))
                                                              "left" "top" BACKGROUND))

(check-equal? (render (game (list 0 1 2 3) 1 1 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (+ GRID_X CELL_WIDTH) GRID_Y)
                                        (make-posn (+ GRID_X (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ GRID_X (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 3 4 5 6) 1 1 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 31 32 33 34) 1 1 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 35 36 37 38) 1 1 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ GRID_X CELL_WIDTH) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 2)) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 3)) (+ GRID_Y CELL_WIDTH)))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 38 39 40 41) 1 1 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) (+ GRID_Y CELL_WIDTH)))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 66 67 68 69) 1 1 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) (+ GRID_Y CELL_WIDTH)))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 31 32 33 34) 1 1 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 1155 1156 1157 1158) 1 1 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ GRID_X CELL_WIDTH) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 2)) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 3)) (+ GRID_Y (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 1158 1159 1160 1161) 1 1 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) (+ GRID_Y (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 1186 1187 1188 1189) 1 1 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) (+ GRID_Y (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 0 35 70 105) 1 1 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X (+ GRID_Y (* 1 CELL_WIDTH)))
                                        (make-posn GRID_X (+ GRID_Y (* 2 CELL_WIDTH)))
                                        (make-posn GRID_X (+ GRID_Y (* 3 CELL_WIDTH))))
                                  "left" "top" BACKGROUND))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(check-equal? (render (game (list 0 1 2 3) 0 0 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (+ GRID_X CELL_WIDTH) GRID_Y)
                                        (make-posn (+ GRID_X (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ GRID_X (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 3 4 5 6) 0 0 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 31 32 33 34) 0 0 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 35 36 37 38) 0 0 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ GRID_X CELL_WIDTH) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 2)) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 3)) (+ GRID_Y CELL_WIDTH)))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 38 39 40 41) 0 0 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) (+ GRID_Y CELL_WIDTH)))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 66 67 68 69) 0 0 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) (+ GRID_Y CELL_WIDTH))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) (+ GRID_Y CELL_WIDTH)))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 31 32 33 34) 0 0 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) GRID_Y)
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) GRID_Y))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 1155 1156 1157 1158) 0 0 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ GRID_X CELL_WIDTH) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 2)) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ GRID_X (* CELL_WIDTH 3)) (+ GRID_Y (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 1158 1159 1160 1161) 0 0 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) (+ GRID_Y (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))
(check-equal? (render (game (list 1186 1187 1188 1189) 0 0 0)) 
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 31) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 31) CELL_WIDTH) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 2)) (+ GRID_Y (* CELL_WIDTH 33)))
                                        (make-posn (+ (* CELL_WIDTH 31) (* CELL_WIDTH 3)) (+ GRID_Y (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 0 35 70 105) 0 0 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn GRID_X (+ GRID_Y (* 1 CELL_WIDTH)))
                                        (make-posn GRID_X (+ GRID_Y (* 2 CELL_WIDTH)))
                                        (make-posn GRID_X (+ GRID_Y (* 3 CELL_WIDTH))))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 143 144 145 146 181 216 251 286) 0 0 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "seagreen")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 4) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 5) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 5 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 6 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 7 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 8 CELL_WIDTH))))
                                  "left" "top" BACKGROUND))

(check-equal? (render (game (list 143 144 145 146 181 216 251 286) 1 1 0))
              (place-images/align (list (text (string-append SCORE_STRING (number->string 0))
                                              SCORE_SIZE SCORE_COLOR)
                                        (rectangle GRID_WIDTH GRID_HEIGHT "outline" GRID_BORDER_COLOR)
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "green")
                                        (square CELL_WIDTH "solid" "seagreen"))
                                  (list (make-posn SCORE_X SCORE_Y)
                                        (make-posn GRID_X GRID_Y)
                                        (make-posn (* CELL_WIDTH 3) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 4) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 5) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 4 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 5 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 6 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 7 CELL_WIDTH)))
                                        (make-posn (* CELL_WIDTH 6) (+ GRID_Y (* 8 CELL_WIDTH))))
                                  "left" "top" BACKGROUND))

(check-equal? (draw-snake-body (list 0 1 2 3) 1 BACKGROUND) 
              (place-images/align (list
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "seagreen"))
                                  (list
                                   (make-posn GRID_X 0)
                                   (make-posn (+ GRID_X CELL_WIDTH) 0)
                                   (make-posn (+ GRID_X (* CELL_WIDTH 2)) 0)
                                   (make-posn (+ GRID_X (* CELL_WIDTH 3)) 0))
                                  "left" "top" BACKGROUND))
(check-equal? (draw-snake-body (list 3 4 5 6) 1 BACKGROUND)
              (place-images/align (list
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "seagreen"))
                                  (list
                                   (make-posn (* CELL_WIDTH 3) 0)
                                   (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) 0)
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) 0)
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) 0))
                                  "left" "top" BACKGROUND))
(check-equal? (draw-snake-body (list 1158 1159 1160 1161) 1 BACKGROUND) 
              (place-images/align (list
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "seagreen"))
                                  (list
                                   (make-posn (* CELL_WIDTH 3) (+ 0 (* CELL_WIDTH 33)))
                                   (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) (+ 0 (* CELL_WIDTH 33)))
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) (+ 0 (* CELL_WIDTH 33)))
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) (+ 0 (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(check-equal? (draw-snake-body (list 0 1 2 3) 0 BACKGROUND) 
              (place-images/align (list
                                   (square CELL_WIDTH "solid" "seagreen")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green"))
                                  (list
                                   (make-posn GRID_X 0)
                                   (make-posn (+ GRID_X CELL_WIDTH) 0)
                                   (make-posn (+ GRID_X (* CELL_WIDTH 2)) 0)
                                   (make-posn (+ GRID_X (* CELL_WIDTH 3)) 0))
                                  "left" "top" BACKGROUND))
(check-equal? (draw-snake-body (list 3 4 5 6) 0 BACKGROUND)
              (place-images/align (list
                                   (square CELL_WIDTH "solid" "seagreen")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green"))
                                  (list
                                   (make-posn (* CELL_WIDTH 3) 0)
                                   (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) 0)
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) 0)
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) 0))
                                  "left" "top" BACKGROUND))
(check-equal? (draw-snake-body (list 1158 1159 1160 1161) 0 BACKGROUND) 
              (place-images/align (list
                                   (square CELL_WIDTH "solid" "seagreen")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green")
                                   (square CELL_WIDTH "solid" "green"))
                                  (list
                                   (make-posn (* CELL_WIDTH 3) (+ 0 (* CELL_WIDTH 33)))
                                   (make-posn (+ (* CELL_WIDTH 3) CELL_WIDTH) (+ 0 (* CELL_WIDTH 33)))
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 2)) (+ 0 (* CELL_WIDTH 33)))
                                   (make-posn (+ (* CELL_WIDTH 3) (* CELL_WIDTH 3)) (+ 0 (* CELL_WIDTH 33))))
                                  "left" "top" BACKGROUND))

(check-equal? (next (game (list 0 1 2 3) HEAD_END RIGHT 0)) (game (list 1 2 3 4) HEAD_END 0 0))
(check-equal? (next (game (list 31 32 33 34) HEAD_START LEFT 0)) (game (list 30 31 32 33) HEAD_START LEFT 0))
(check-equal? (next (game (list 105 140 175 210) HEAD_START UP 0)) (game (list 70 105 140 175) HEAD_START UP 0))
(check-equal? (next (game (list 105 140 175 210) HEAD_END DOWN 0)) (game (list 140 175 210 245) HEAD_END DOWN 0))
(check-equal? (next (game (list 110 145 180 215) HEAD_START RIGHT 0)) (game (list 111 110 145 180) HEAD_START RIGHT 0))
(check-exn #rx"Illegal move" (lambda () (next (game (list 0 1 2 3) HEAD_START RIGHT 0))))
(check-equal? (next (game (list 111 110 145 180) HEAD_START RIGHT 0)) (game (list 112 111 110 145) HEAD_START RIGHT 0))
(check-equal? (next (game (list 112 111 110 145 180) HEAD_START RIGHT 0)) (game (list 113 112 111 110 145) HEAD_START RIGHT 0))
(check-equal? (next (game (list 112 111 110 145 180 215) HEAD_START RIGHT 0)) (game (list 113 112 111 110 145 180) HEAD_START RIGHT 0))
(check-equal? (next (game (list 112 111 110 145) HEAD_START RIGHT 0)) (game (list 113 112 111 110) HEAD_START RIGHT 0))
(check-equal? (next (game (list 112 111 110 145 212 213 214 180 215) HEAD_START RIGHT 0))
              (game (list 113 112 111 110 213 214 215 145 180) HEAD_START RIGHT 0))

